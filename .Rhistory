annotation_logticks(sides = "lb")
# accuracy variance with background interference
d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 3, alpha = .5) +
geom_point(size = 3, shape = 21, fill = NA) +
geom_smooth(method = "lm", se = F) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb")
# accuracy variance with background interference
d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 3, alpha = .5) +
geom_point(size = 3, shape = 21, fill = NA) +
geom_smooth(method = "lm", se = F) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
# accuracy variance with background interference
d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 3, alpha = .5) +
geom_point(size = 3, shape = 21, fill = NA) +
geom_smooth(method = "lm", se = F, show.legend = F) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
# accuracy variance with background interference
d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 3, alpha = .5) +
geom_point(size = 3, shape = 21, fill = NA) +
geom_smooth(method = "lm", se = F, show.legend = F) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(legend.position = c(.2, .2))
# accuracy variance with background interference
d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 3, alpha = .5) +
geom_point(size = 3, shape = 21, fill = NA) +
geom_smooth(method = "lm", se = F) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(legend.position = c(.2, .2))
# accuracy variance with background interference
d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 3, alpha = .5) +
geom_point(size = 3, shape = 21, fill = NA) +
geom_smooth(method = "lm",  show.legend = F) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(legend.position = c(.2, .2))
# accuracy variance with background interference
d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 3, alpha = .5) +
geom_point(size = 3, shape = 21, fill = NA) +
geom_smooth(method = "lm",  show.legend = F, aes(fill = Name)) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(legend.position = c(.2, .2))
# accuracy variance with background interference
d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 3, alpha = .5) +
geom_point(size = 3, shape = 21, fill = NA) +
geom_smooth(method = "lm",  show.legend = F, aes(fill = Name), alpha = .2) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(legend.position = c(.2, .2))
# accuracy variance with background interference
d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 3, alpha = .5) +
geom_point(size = 3, shape = 21, fill = NA) +
geom_smooth(method = "lm",  show.legend = F, aes(fill = Name), alpha = .1) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(legend.position = c(.2, .2))
# accuracy variance with background interference
d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 3, alpha = .5) +
geom_point(size = 3, shape = 21, fill = NA) +
geom_smooth(method = "lm",  show.legend = F, aes(fill = Name), alpha = .1) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(legend.position = c(.2, .2),
axis.text = element_text(size = 12))
# accuracy variance with background interference
plt.accuracyVariance.vs.background = d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 3, alpha = .5) +
geom_point(size = 3, shape = 21, fill = NA) +
geom_smooth(method = "lm",  show.legend = F, aes(fill = Name), alpha = .1) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(legend.position = c(.2, .2),
axis.text = element_text(size = 12))
plt.accuracyVariance.vs.background
# accuracy variance with background interference
plt.accuracyVariance.vs.background = d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 3, alpha = .5) +
geom_point(size = 3, shape = 21, fill = NA) +
geom_smooth(method = "lm",  show.legend = F, aes(fill = Name), alpha = .1) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(legend.position = c(.2, .2),
axis.text = element_text(size = 10))
plt.accuracyVariance.vs.background
rmarkdown::render_site()
getwd()
setwd("/Users/Boyuan/Desktop/My publication/17. EMR Adipose RK metabolites/Github RK adipose/RK_adipose_QuEChERS_EMR")
getwd()
rmarkdown::render_site()
y1 = func.plotStepwiseRecovery(whichCompound =  "RK")
y2 = func.plotStepwiseRecovery(whichCompound =  "ROH")
y3 = func.plotStepwiseRecovery(whichCompound =  "RK-Me")
y4 = func.plotStepwiseRecovery(whichCompound =  "3-HBA")
yy = plot_grid(y1, y2, y3, y4, nrow = 1)
plt.streamLine = plot_grid(y1, y2, y3, y4, nrow = 1)
grid.arrange(plt.recovery.all, plt.streamLine, plt.accuracy, nrow = 3)
plt.accuracyAnalysis = grid.arrange(plt.accuracy, plt.accuracyVariance.vs.background, nrow = 1)
grid.arrange(plt.recovery.all,
plt.streamLine,
plt.accuracyAnalysis, nrow = 3)
plt.accuracyAnalysis = plot_grid(plt.accuracy, plt.accuracyVariance.vs.background,
nrow = 1, rel_widths = c(5, 4))
grid.arrange(plt.recovery.all,
plt.streamLine,
plt.accuracyAnalysis, nrow = 3)
# accuracy variance with background interference
plt.accuracyVariance.vs.background = d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 2, alpha = .5) +
geom_point(size = 2, shape = 21, fill = NA) +
geom_smooth(method = "lm",  show.legend = F, aes(fill = Name), alpha = .1) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(legend.position = c(.3, .3),
axis.text = element_text(size = 10))
plt.accuracyAnalysis = plot_grid(plt.accuracy, plt.accuracyVariance.vs.background,
nrow = 1, rel_widths = c(5, 4))
grid.arrange(plt.recovery.all,
plt.streamLine,
plt.accuracyAnalysis, nrow = 3)
plt.Validation.Accuracy.Recovery
plt.Validation.Accuracy.Recovery = grid.arrange(
plt.recovery.all,
plt.streamLine,
plt.accuracyAnalysis, nrow = 3)
plt.Validation.Accuracy.Recovery
plt.streamLine = plot_grid(y1, y2, y3,nrow = 1)
plt.Validation.Accuracy.Recovery = plot_grid(
plt.recovery.all,
plt.streamLine,
plt.accuracyAnalysis, nrow = 3,
rel_heights = c(3, 4, 3))
plt.Validation.Accuracy.Recovery
plt.Validation.Accuracy.Recovery
plt.Validation.Accuracy.Recovery
plt.streamLine = plot_grid(y1, y2, y3, y4, nrow = 1)
dd.i %>%
ggplot(aes(x = numericX, y = recovery.cummulated, color = status)) +
geom_line(aes(group = status), position = position_dodge(dg)) +
theme(legend.position = c(.25, .2),
legend.title = element_blank(),
#legend.text = element_text(size = 12),
panel.grid = element_blank(),
strip.text = element_text(size = 10),
axis.text = element_text(colour = "black"),
axis.title = element_text(colour = "black")
) +
# scale_y_continuous(breaks = seq(0, max(dd.i$recovery.cummulated) + 10, by = 10)) +
scale_x_continuous(breaks = myX) +
facet_wrap(~compound, nrow = 3, scales = "free_y") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Processing steps", y = "Recovery (%)") +
# error band
# extraction error band for accumulated recovery until end of extraction
geom_ribbon(data = dd.i %>% filter(step == "Extraction"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(2,3, 2,3), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# EMR error band for accumulated recovery until end of EMR
geom_ribbon(data = dd.i %>% filter(step == "EMR"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(3,4, 3,4), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# Dry and recovery error band for accumulated recovery until end of reconstitution
geom_ribbon(data = dd.i %>% filter(step == "Dry"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(4,5, 4,5), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# Matrix effect error band for accumulated recovery until end of ESI
geom_ribbon(data = dd.i %>% filter(step == "matrixEffect"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(5,6, 5,6), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# Add annotation
# stepwise loss
geom_label(aes(label = round(stepLossPercent, 1), y = lossMarkPosition),
size = 2,
# fontface = "bold",
position = position_dodge(dg)) +
# accumulated recovery
geom_label(aes(label = round(ymark, 1),
fill = status,
y = ymark, x = numericX + .5),
fontface = "bold", size = 2, color = "white")
func.plotStepwiseRecovery = function(whichCompound) {
dd.i = d.recovery.cummulated.all.withStepWise %>% filter(compound == whichCompound)
dd.i %>%
ggplot(aes(x = numericX, y = recovery.cummulated, color = status)) +
geom_line(aes(group = status), position = position_dodge(dg)) +
theme(legend.position = c(.25, .2),
legend.title = element_blank(),
#legend.text = element_text(size = 12),
panel.grid = element_blank(),
strip.text = element_text(size = 10),
axis.text = element_text(colour = "black"),
axis.title = element_text(colour = "black")
) +
# scale_y_continuous(breaks = seq(0, max(dd.i$recovery.cummulated) + 10, by = 10)) +
scale_x_continuous(breaks = myX) +
facet_wrap(~compound, nrow = 3, scales = "free_y") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Processing steps", y = "Recovery (%)") +
# error band
# extraction error band for accumulated recovery until end of extraction
geom_ribbon(data = dd.i %>% filter(step == "Extraction"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(2,3, 2,3), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# EMR error band for accumulated recovery until end of EMR
geom_ribbon(data = dd.i %>% filter(step == "EMR"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(3,4, 3,4), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# Dry and recovery error band for accumulated recovery until end of reconstitution
geom_ribbon(data = dd.i %>% filter(step == "Dry"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(4,5, 4,5), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# Matrix effect error band for accumulated recovery until end of ESI
geom_ribbon(data = dd.i %>% filter(step == "matrixEffect"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(5,6, 5,6), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# Add annotation
# stepwise loss
geom_label(aes(label = round(stepLossPercent, 1), y = lossMarkPosition),
size = 2,
# fontface = "bold",
position = position_dodge(dg)) +
# accumulated recovery
geom_label(aes(label = round(ymark, 1),
fill = status,
y = ymark, x = numericX + .5),
fontface = "bold", size = 2, color = "white")
}
func.plotStepwiseRecovery = function(whichCompound) {
dd.i = d.recovery.cummulated.all.withStepWise %>% filter(compound == whichCompound)
dd.i %>%
ggplot(aes(x = numericX, y = recovery.cummulated, color = status)) +
geom_line(aes(group = status), position = position_dodge(dg)) +
theme(legend.position = c(.25, .2),
legend.title = element_blank(),
#legend.text = element_text(size = 12),
panel.grid = element_blank(),
strip.text = element_text(size = 10),
axis.text = element_text(colour = "black"),
axis.title = element_text(colour = "black")
) +
# scale_y_continuous(breaks = seq(0, max(dd.i$recovery.cummulated) + 10, by = 10)) +
scale_x_continuous(breaks = myX) +
facet_wrap(~compound, nrow = 3, scales = "free_y") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Processing steps", y = "Recovery (%)") +
# error band
# extraction error band for accumulated recovery until end of extraction
geom_ribbon(data = dd.i %>% filter(step == "Extraction"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(2,3, 2,3), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# EMR error band for accumulated recovery until end of EMR
geom_ribbon(data = dd.i %>% filter(step == "EMR"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(3,4, 3,4), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# Dry and recovery error band for accumulated recovery until end of reconstitution
geom_ribbon(data = dd.i %>% filter(step == "Dry"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(4,5, 4,5), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# Matrix effect error band for accumulated recovery until end of ESI
geom_ribbon(data = dd.i %>% filter(step == "matrixEffect"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(5,6, 5,6), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# Add annotation
# stepwise loss
geom_label(aes(label = round(stepLossPercent, 1), y = lossMarkPosition),
size = 2,
# fontface = "bold",
position = position_dodge(dg)) +
# accumulated recovery
geom_label(aes(label = round(ymark, 1),
fill = status,
y = ymark, x = numericX + .5),
fontface = "bold", size = 2, color = "white")
}
y1 = func.plotStepwiseRecovery(whichCompound =  "RK")
y2 = func.plotStepwiseRecovery(whichCompound =  "ROH")
y3 = func.plotStepwiseRecovery(whichCompound =  "RK-Me")
y4 = func.plotStepwiseRecovery(whichCompound =  "3-HBA")
plt.streamLine = plot_grid(y1, y2, y3, y4, nrow = 1)
plt.accuracyAnalysis = plot_grid(plt.accuracy, plt.accuracyVariance.vs.background,
nrow = 1, rel_widths = c(5, 4))
plt.Validation.Accuracy.Recovery = plot_grid(
plt.recovery.all,
plt.streamLine,
plt.accuracyAnalysis, nrow = 3,
rel_heights = c(3, 3.6, 3))
plt.Validation.Accuracy.Recovery
func.plotStepwiseRecovery = function(whichCompound) {
dd.i = d.recovery.cummulated.all.withStepWise %>% filter(compound == whichCompound)
dd.i %>%
ggplot(aes(x = numericX, y = recovery.cummulated, color = status)) +
geom_line(aes(group = status), position = position_dodge(dg)) +
theme(legend.position = c(.25, .2),
legend.title = element_blank(),
#legend.text = element_text(size = 12),
panel.grid = element_blank(),
strip.text = element_text(size = 10),
axis.text = element_text(colour = "black"),
axis.title = element_text(colour = "black")
) +
# scale_y_continuous(breaks = seq(0, max(dd.i$recovery.cummulated) + 10, by = 10)) +
scale_x_continuous(breaks = myX) +
facet_wrap(~compound, nrow = 3, scales = "free_y") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Processing steps", y = "Recovery (%)") +
# error band
# extraction error band for accumulated recovery until end of extraction
geom_ribbon(data = dd.i %>% filter(step == "Extraction"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(2,3, 2,3), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# EMR error band for accumulated recovery until end of EMR
geom_ribbon(data = dd.i %>% filter(step == "EMR"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(3,4, 3,4), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# Dry and recovery error band for accumulated recovery until end of reconstitution
geom_ribbon(data = dd.i %>% filter(step == "Dry"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(4,5, 4,5), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# Matrix effect error band for accumulated recovery until end of ESI
geom_ribbon(data = dd.i %>% filter(step == "matrixEffect"),
aes(ymin = recovery.cummulated.homogenous - recovery.cummulated.errorBand,
ymax = recovery.cummulated.homogenous + recovery.cummulated.errorBand,
x = c(5,6, 5,6), fill = status), alpha = myalpha, position = position_dodge(dg),
linetype = "dotted", show.legend = F) +
# Add annotation
# stepwise loss
geom_label(aes(label = round(stepLossPercent, 1), y = lossMarkPosition),
size = 2.5,
# fontface = "bold",
position = position_dodge(dg)) +
# accumulated recovery
geom_label(aes(label = round(ymark, 1),
fill = status,
y = ymark, x = numericX + .5),
fontface = "bold", size = 2.5, color = "white")
}
y1 = func.plotStepwiseRecovery(whichCompound =  "RK")
y2 = func.plotStepwiseRecovery(whichCompound =  "ROH")
y3 = func.plotStepwiseRecovery(whichCompound =  "RK-Me")
y4 = func.plotStepwiseRecovery(whichCompound =  "3-HBA")
plt.streamLine = plot_grid(y1, y2, y3, y4, nrow = 1)
# accuracy variance with background interference
plt.accuracyVariance.vs.background = d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 2, alpha = .5) +
geom_point(size = 2, shape = 21, fill = NA) +
geom_smooth(method = "lm",  show.legend = F, aes(fill = Name), alpha = .1) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(legend.position = c(.3, .3),
axis.text = element_text(size = 10))
plt.accuracyAnalysis = plot_grid(plt.accuracy, plt.accuracyVariance.vs.background,
nrow = 1, rel_widths = c(5, 4))
plt.Validation.Accuracy.Recovery = plot_grid(
plt.recovery.all,
plt.streamLine,
plt.accuracyAnalysis, nrow = 3,
rel_heights = c(3, 3.6, 3))
plt.Validation.Accuracy.Recovery
plt.Validation.Accuracy.Recovery
# accuracy variance with background interference
plt.accuracyVariance.vs.background = d.ABCD %>% select(compound, contains("Accuracy"), Name, conc.expected) %>%
left_join(d.conc.blk, by = "compound") %>%
mutate(ratio.spk.vs.blk = conc.expected / conc.blk.mean) %>%
ggplot(aes(x = ratio.spk.vs.blk, y = Accuracy.sd, color = Name)) +
geom_point(size = 2, alpha = .5) +
geom_point(size = 2, shape = 21, fill = NA) +
geom_smooth(method = "lm",  show.legend = F, aes(fill = Name), alpha = .1) +
scale_y_log10() +
scale_x_log10() +
annotation_logticks(sides = "lb") +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(legend.position = c(.2, .3),
axis.text = element_text(size = 10))
plt.accuracyAnalysis = plot_grid(plt.accuracy, plt.accuracyVariance.vs.background,
nrow = 1, rel_widths = c(5, 4))
plt.Validation.Accuracy.Recovery = plot_grid(
plt.recovery.all,
plt.streamLine,
plt.accuracyAnalysis, nrow = 3,
rel_heights = c(3, 3.6, 3))
plt.Validation.Accuracy.Recovery
